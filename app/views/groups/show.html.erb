<title>Billcrush - <%= @group.name %></title>
<div style=background:#F1F2ED;min-width:824px>
<div id=page>
  <h1>billcrush</h1>
  <h2 style=display:inline-block;margin-left:12px><%= @group.name %></h2>
  <!-- <%= form_for [@group, @new_member] do |f| %>
    <%= f.label(:name) %>
    <%= f.text_field(:name) %>
    <%= f.submit %>
  <% end %> -->
  <%= form_for [@group, @new_transaction] do |tf| %>
  <table><tr>
    <td id=trans style=padding-bottom:67px>
      <h3>New transaction</h3>
      <table style=float:left>
        <tr>
          <td>
            <p><%= tf.label :description %></p>
            <%= tf.text_field :description, {:size => 1, :style => 'width:100%'} %>
          <td style=width:1px;padding-left:4px>
            <p>Date</p>
            <input type=text size=6 id=date>
        <tr>
          <td colspan=2>
            <div style=margin-top:8px>
              <%= collection_select(:transaction, :payer, @group.members, :id, :name) %>
            &nbsp;paid&nbsp; $ <%= tf.text_field :amount, {:size => 6} %>
            </div>
      </table>
      <div style=float:left;margin-left:24px>
        <p>Split between
        <div class=no_select>
          <table id=split>
            <% @members.each do |member| %>
              <tr>
                <td><input type=checkbox checked=true id=split<%= member.to_param %>><%= label_tag "split#{member.to_param}", ' ' + member.name %> &nbsp;
                <td>$ <%= text_field_tag "transaction[members][#{member.to_param}]", '', {:size => 6, :class => 'auto'} %>
            <% end %>
          </table>
        </div>
      </div>
    <td style=width:12px>
    <td id=settle>
      <% members_by_balance = @members.sort_by(&:balance) %>
      <div style=float:left>
        <h3>Owed</h3>
        <ul>
          <% members_by_balance.reverse.find_all{|m| m.balance > 0}.each do |member| %>
            <li><%= "#{member.name}: #{money(member.balance)}" %>
          <% end %>
        </ul>
      </div>
      <div style=float:left;margin-left:24px>
        <h3>Owes</h3>
        <ul>
          <% members_by_balance.find_all{|m| m.balance < 0}.each do |member| %>
            <li><%= "#{member.name}: #{money(member.balance)}" %>
          <% end %>
        </ul>
      </div>
      <h3 style=clear:both;padding-top:12px>Settle</h3>
      <ul>
        <% @group.best_way_to_settle.each do |settlement| %>
          <li><%= settlement[:payer].name %> pays <%= settlement[:payee].name %> <%= money(settlement[:amount]) %>
          <%= settlement[:payer].name %> pays <%= settlement[:payee].name %> <%= money(settlement[:amount]) %>
          <%= form_for :transaction, :url => group_transactions_url(@group), :html => {:method => :post} do |f| %>
              <%= f.hidden_field(:payer, :value => settlement[:payer].to_param) %>
              <%= f.hidden_field(:settlement, :value => "1") %>
              <%= f.hidden_field(:amount, :value => settlement[:amount].to_f / 100) %>
              <%= hidden_field_tag "transaction[members][#{settlement[:payee].to_param}]", settlement[:amount].to_f / 100 %>
              <%= f.submit "Settle" %>
          <% end %>
        <% end %>
        <li><a href="javascript:return false">Settle all</a>
      </ul>
  </table>
  <p style="position:absolute;margin:-55px 0 0 24px">
    <%= tf.submit('Add transaction', {:class => 'primary'}) %>
  <% end %>
  <div id=hist>
    <table id=hist_table>
      <tr>
        <th>Date
        <th>Description
        <th>Cost
        <% @group.members.each do |member|%>
          <th><%= member.name %>
        <% end %>
      <% @transactions.each do |transaction| %>
        <tr class=t>
          <td>
          <td><%= transaction.description %>
          <td><%= money_no_unit(transaction.amount) %>
          <% @group.members.each do |member| %>
            <td>
            <%
              credits = member.credits_for_transaction(transaction)
              debits = member.debits_for_transaction(transaction)
              next if credits == 0 and debits == 0
            %>
            <div class=eq><%= money_no_unit(credits) %>
              <p><%= money_no_unit(-debits) %><hr></div>
              <%= money_no_unit(credits - debits) %>
          <% end %>
          <td><ul>
            <li><a href="javascript:return false">Duplicate</a>
            <li><a href="javascript:return false">Edit</a>
            <li><%= link_to "Delete!", group_transaction_url(@group, transaction), {:method => :delete, :confirm => "Are you sure you want to delete this transaction?"} %>
        </tr>
      <% end %>
      <tr class=b>
        <td>
        <td>Total
        <td><%= money(@transactions.sum(:amount)) %>
        <% @group.members.each do |member|%>
          <td><%= money(member.balance) %>
        <% end %>
        <td>
    </table>
  </div>
</div>
</div>
<div id=foot>
</div>

<script>
$(function() {
  var i;
  
  $.datepicker.setDefaults({showAnim:'',prevText:'Previous'});
  $('#date').datepicker().datepicker('widget').css('display', 'none');
  $('#date').datepicker('setDate', new Date);
  
  var hideRows = function() {
    $('#hist_table tr').removeClass('s');
  };
  document.body.onclick = hideRows;
  $('.t').click(function(e) {
    hideRows();
    $(this).addClass('s');
    e.stopPropagation();
  });
  
  var splitCheckChange = function() {
    if (!this.on()) {
      this.val('');
    }
    updateSplit();
  };
  var splitTextFocus = function() {
    if (this.text.hasClass('auto')) {
      this.typeVal = this.focusVal = this.val();
      this.text.removeClass('auto');
    } else {
      this.focusVal = null;
    }
  };
  var splitTextBlur = function() {
    var val = this.val();
    if (val === this.focusVal) {
      this.text.addClass('auto');
    } else if (val === '') {
      this.text.addClass('auto');
      updateSplit();
    } else if (val == 0) {
      this.on(false);
    }
  };
  var splitTextKeyup = function() {
    var val = this.val();
    if (val != this.typeVal) {
      this.typeVal = val;
      updateSplit();
    }
  }
  var money_no_unit = function(num) {
    num = parseFloat(num);
    if (isNaN(num)) {
      return '';
    } else {
      return num.toFixed(2);
    }
  }
  var moneyTextBlur = function() {
    var text = $(this);
    text.val(money_no_unit(text.val()));
  }
  var SplitItem = function(row) {
    var that = this,
        check = row.find('[type="checkbox"]'),
        text = row.find('[type="text"]');
    this.check = check;
    this.text = text;
    this.focusVal = null;
    this.typeVal = null;
    var wrapEvent = function(f) {
      return function() {
        f.apply(that, arguments);
      }
    };
    check.change(wrapEvent(splitCheckChange));
    text.focus(wrapEvent(splitTextFocus));
    text.blur(wrapEvent(splitTextBlur));
    text.keyup(wrapEvent(splitTextKeyup));
    text.blur(moneyTextBlur);
  };
  SplitItem.prototype = {
    on: function() {
      switch (arguments.length) {
        case 0:
          return this.check.is(':checked');
        case 1:
          if (arguments[0]) {
            this.check.attr('checked','checked');
          } else {
            this.check.removeAttr('checked');
            this.val('');
          }
          updateSplit();
          return;
      }
    },
    auto: function() {
      switch (arguments.length) {
        case 0:
          return this.text.is('.auto');
      }
    },
    val: function() {
      switch (arguments.length) {
        case 0:
          var val = Math.floor(parseFloat(this.text.val()) * 100);
          return (isNaN(val)) ? '' : val;
        case 1:
          var val = parseInt(arguments[0]) / 100;
          val = (val < 0) ? '' : money_no_unit(val);
          if (val === '') {
            this.text.attr('disabled', 'disabled').addClass('auto');
          } else {
            this.text.removeAttr('disabled');
          }
          this.text.val(val);
          return;
      }
    }
  };
  var updateSplit = function() {
    if (amount.val() === '') {
      _.each(splitItems, function(item) { item.val('') });
    } else {
      var total = Math.floor(amount.val() * 100),
          manualTotal = _.reduce(splitItems, function(memo, item) {
              return memo + ((!item.auto() && item.val()) ? item.val() : 0);
            }, 0),
          autoItems = _.select(splitItems, function(item) {
            return item.on() && item.auto();
          }),
          splitAmount = total - manualTotal,
          autoItemsLen = autoItems.length,
          split = Math.floor(splitAmount / autoItemsLen),
          remain = splitAmount % split;
      autoItems.sort(function() { return 0.5 - Math.random() });
      _.each(autoItems, function(item, i) {
        item.val(split + ((remain-- > 0) ? 1 : 0));
      });
    }
  };
  var splitRows = $('#split tr'),
      splitItems = _.map(splitRows, function(row) { return new SplitItem($(row)) }),
      amount = $('#transaction_amount');
  amount.keyup(updateSplit);
  amount.blur(moneyTextBlur);
  updateSplit();
});
</script>
